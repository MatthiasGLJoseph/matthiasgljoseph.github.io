{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cleaning Code Lesson A repository made to stock good practice lessons when it comes to cleaning python code. Includes a basic hello function. Installation No installation should be required. In case of trouble a configuration misshap might be occurring between python and its modules. In that case, follow this to use the function through the creation module. curl -sSL https://install.python-poetry.org | python3 - - To install poetry poetry install - To install the project in poetry poetry update - To check whether any module used is obsolete and replace it poetry run hello --name <NAME> - Use example function with arg NAME through main interface Commands mkdocs new [dir-name] - Create a new project mkdocs serve - Start the live-reloading docs server mkdocs build - Build the documentation site mkdocs -h - Print help message and exit hello --name <NAME> - Use example function with arg NAME Usage Its main usage is as a learning tool to clean data. Data can be relatively clean through following good standards. There are however over 800 basic rules of cleaning standards, sometimes contradictory. Using functions such as Ruff in pre-commits allows to tailor cleanliness to all chosen standards. You can check out the Poetry config file to view the Ruff configuration. The pre-commit config file also contains Ruff configuration. Project layout .gitignore # Git file to choose what not to send to GitHub .pre-commit-config.yaml # Pre-commit config file mkdocs.yml # Markdown docs config file poetry.lock # Full module package explanation pyproject.toml # Poetry config file README.md # Readme file .../ # Cache folder(s) docs/ index.md # MkDocs homepage src/ matthiasgljoseph_toolkit/ .../ # Cache folder(s) __init__.py # Init file to mark module, good practice to obsolete cli.py # Main module source file tests/ __init__.py # Init file for the test folder, useful for test implementation Made using Git, MkDocs, Poetry For Git documentation visit git-scm.com For MkDocs documentation visit mkdocs.org For Poetry documentation visit python-poetry.org For Ruff documentation visit docs.astral.sh","title":"Cleaning Code Lesson"},{"location":"#cleaning-code-lesson","text":"A repository made to stock good practice lessons when it comes to cleaning python code. Includes a basic hello function.","title":"Cleaning Code Lesson"},{"location":"#installation","text":"No installation should be required. In case of trouble a configuration misshap might be occurring between python and its modules. In that case, follow this to use the function through the creation module. curl -sSL https://install.python-poetry.org | python3 - - To install poetry poetry install - To install the project in poetry poetry update - To check whether any module used is obsolete and replace it poetry run hello --name <NAME> - Use example function with arg NAME through main interface","title":"Installation"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project mkdocs serve - Start the live-reloading docs server mkdocs build - Build the documentation site mkdocs -h - Print help message and exit hello --name <NAME> - Use example function with arg NAME","title":"Commands"},{"location":"#usage","text":"Its main usage is as a learning tool to clean data. Data can be relatively clean through following good standards. There are however over 800 basic rules of cleaning standards, sometimes contradictory. Using functions such as Ruff in pre-commits allows to tailor cleanliness to all chosen standards. You can check out the Poetry config file to view the Ruff configuration. The pre-commit config file also contains Ruff configuration.","title":"Usage"},{"location":"#project-layout","text":".gitignore # Git file to choose what not to send to GitHub .pre-commit-config.yaml # Pre-commit config file mkdocs.yml # Markdown docs config file poetry.lock # Full module package explanation pyproject.toml # Poetry config file README.md # Readme file .../ # Cache folder(s) docs/ index.md # MkDocs homepage src/ matthiasgljoseph_toolkit/ .../ # Cache folder(s) __init__.py # Init file to mark module, good practice to obsolete cli.py # Main module source file tests/ __init__.py # Init file for the test folder, useful for test implementation","title":"Project layout"},{"location":"#made-using-git-mkdocs-poetry","text":"For Git documentation visit git-scm.com For MkDocs documentation visit mkdocs.org For Poetry documentation visit python-poetry.org For Ruff documentation visit docs.astral.sh","title":"Made using Git, MkDocs, Poetry"}]}